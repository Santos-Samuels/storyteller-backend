generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model role {
  id        String   @id() @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      user[]
}

model user {
  id        String   @id() @default(uuid())
  name      String
  email     String   @unique
  password  String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  role            role              @relation(fields: [roleId], references: [id])
  story           story[]
  userInteraction userInteraction[]
}

model story {
  id            String @id() @default(uuid())
  theme         String
  title         String
  into          String
  summary       String
  backgroundUrl String
  authorId      String

  author          user              @relation(fields: [authorId], references: [id])
  character       character[]
  sceneCharacter  sceneCharacter[]
  userInteraction userInteraction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model character {
  id        String @id() @default(uuid())
  storyId   String
  name      String
  role      String
  position  String
  avatarUrl String

  story          story            @relation(fields: [storyId], references: [id])
  sceneCharacter sceneCharacter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model sceneCharacter {
  id          String @id() @default(uuid())
  characterId String
  storyId     String
  order       Int
  speech      String
  emotion     String
  avatarUrl   String

  character             character               @relation(fields: [characterId], references: [id])
  story                 story                   @relation(fields: [storyId], references: [id])
  userInteractionOption userInteractionOption[]
  userInteraction       userInteraction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model userInteractionOption {
  id                   String @id() @default(uuid())
  sceneCharacterId     String
  nextSceneCharacterId String
  label                String
  feedback             String

  sceneCharacter  sceneCharacter    @relation(fields: [sceneCharacterId], references: [id])
  userInteraction userInteraction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model userInteraction {
  id                      String @id() @default(uuid())
  userId                  String
  storyId                 String
  sceneCharacterId        String
  userInteractionOptionId String
  situation               String

  user                  user                  @relation(fields: [userId], references: [id])
  sceneCharacter        sceneCharacter        @relation(fields: [sceneCharacterId], references: [id])
  story                 story                 @relation(fields: [storyId], references: [id])
  userInteractionOption userInteractionOption @relation(fields: [userInteractionOptionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
