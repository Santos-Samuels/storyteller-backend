generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model role {
  id        String   @id() @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      user[]
}

model user {
  id        String   @id() @default(uuid())
  name      String
  email     String   @unique
  password  String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  role  role    @relation(fields: [roleId], references: [id])
  story story[]
}

model story {
  id            String @id() @default(uuid())
  theme         String
  title         String
  intro         String
  summary       String
  backgroundUrl String
  authorId      String

  author          user             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  characters      character[]
  sceneCharacters sceneCharacter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model character {
  id        String @id() @default(uuid())
  storyId   String
  name      String
  role      String
  position  String
  avatarUrl String
  gender    String

  story          story            @relation(fields: [storyId], references: [id], onDelete: Cascade)
  sceneCharacter sceneCharacter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model sceneCharacter {
  id          String @id() @default(uuid())
  characterId String
  storyId     String
  order       Int
  speech      String
  emotion     String
  avatarUrl   String

  character character @relation(fields: [characterId], references: [id])
  story     story     @relation(fields: [storyId], references: [id], onDelete: Cascade)

  options     userInteractionOption[]
  interaction userInteraction?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
}

model userInteractionOption {
  id                   String @id() @default(uuid())
  sceneCharacterId     String
  nextSceneCharacterId String
  label                String
  feedback             String
  interactionId        String

  sceneCharacter sceneCharacter  @relation(fields: [sceneCharacterId], references: [id], onDelete: Cascade)
  interaction    userInteraction @relation(fields: [interactionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model userInteraction {
  id               String  @id() @default(uuid())
  storyId          String
  sentence         String
  sceneCharacterId String @unique

  options userInteractionOption[]
  sceneCharacter        sceneCharacter?        @relation(fields: [sceneCharacterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
